{"version":3,"file":"index.modern.js","sources":["../src/generators/html.ts","../src/index.tsx"],"sourcesContent":["import type { ContentNodeType } from '../types'\n\nconst HEADING_TAGS = ['', '<h1>', '<h2>', '<h3>', '<h4>', '<h5>', '<h6>']\n\nclass ContentNode implements ContentNodeType {\n  children: ContentNodeType[] = []\n  parent: ContentNodeType | null = null\n  tag: string | null = null\n  text: string | null = null\n\n  constructor(tag: string, text: string, children = [], parent = null) {\n    this.tag = tag\n    this.text = text\n    this.children = children\n    this.parent = parent\n  }\n\n  get cleanText(): string | null {\n    const result = this.text\n\n    if (result == null) {\n      return null\n    }\n\n    return result.slice(4, result?.length - 5)\n  }\n\n  toJson(): any {\n    return {\n      [this.text?.slice(4, this.text?.length - 5) || '']: this.children.map(\n        (value) => value.toJson()\n      )\n    }\n  }\n\n  add(node: ContentNodeType) {\n    node.parent = this\n    this.children.push(node)\n  }\n\n  getParent(prev: ContentNodeType): ContentNodeType {\n    while (true) {\n      if (\n        prev.parent == null ||\n        HEADING_TAGS.indexOf(prev.tag || '') <\n          HEADING_TAGS.indexOf(this.tag || '')\n      ) {\n        return prev\n      }\n\n      prev = prev.parent\n    }\n  }\n\n  padding(count: number, segment: string) {\n    let result = ''\n    const i = 0\n\n    while (i < count) {\n      result += segment\n      count += 1\n    }\n\n    return result\n  }\n}\n\nfunction cleanup(htmlMarkup: string): string {\n  htmlMarkup = htmlMarkup.trim()\n\n  if (!htmlMarkup) {\n    return htmlMarkup\n  }\n\n  if (htmlMarkup.startsWith('<h4>')) {\n    let a = htmlMarkup.split('</h4>')\n    a = a.slice(1)\n    return a.join('</h4>')\n  } else if (htmlMarkup.startsWith('<h3>')) {\n    let a = htmlMarkup.split('</h3>')\n    a = a.slice(1)\n    return a.join('</h3>')\n  }\n\n  return htmlMarkup\n}\n\nexport default function generateTableOfContent(\n  htmlMarkup: string\n): ContentNodeType {\n  htmlMarkup = cleanup(htmlMarkup)\n\n  const root = new ContentNode('', '')\n  let prev = root\n\n  let interimTag: string | null = null\n  let interimText: string | null = null\n  let i = 0\n\n  while (i < htmlMarkup.length) {\n    if (\n      htmlMarkup[i] === '<' &&\n      HEADING_TAGS.includes(htmlMarkup.slice(i, i + 4))\n    ) {\n      interimTag = htmlMarkup.slice(i, i + 4)\n      interimText = htmlMarkup.slice(i, i + 4)\n      i += 4\n      continue\n    } else if (\n      interimTag != null &&\n      htmlMarkup[i] === '<' &&\n      htmlMarkup.slice(i, i + 5) === '</' + interimTag.slice(1)\n    ) {\n      interimText += htmlMarkup.slice(i, i + 5)\n\n      const newNode: ContentNode = new ContentNode(\n        interimTag,\n        interimText || ''\n      )\n      const parent: ContentNodeType = newNode.getParent(prev)\n      parent.add(newNode)\n      prev = newNode\n\n      interimText = null\n      i += 5\n      continue\n    } else if (interimText != null) {\n      interimText += htmlMarkup[i]\n    }\n\n    i += 1\n  }\n\n  return root\n}\n\n// root = enerateTableOfContent(SAMPLE);\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport generateTableOfContent from './generators/html'\n\n// import styles from './styles.module.css'\nimport { ContentNodeType } from './types'\n\ninterface Props {\n  content: string\n}\n\ninterface TableOfContentTreeProps {\n  node: ContentNodeType\n}\n\nconst createIdForTableOfContentHeading = (heading: string) => {\n  if (!heading) {\n    return\n  }\n\n  return encodeURIComponent(heading.toLowerCase().replaceAll(' ', '-'))\n}\n\nconst TableOfContentsTree = ({ node }: TableOfContentTreeProps) => {\n  console.log(\n    `At ${node.cleanText || 'root'} with children ${JSON.stringify(\n      node.children?.map((_) => _.cleanText)\n    )}`\n  )\n\n  if (node === null || node === undefined) return <React.Fragment />\n\n  return (\n    <React.Fragment>\n      {node.cleanText && (\n        <li>\n          <a href={`#${createIdForTableOfContentHeading(node.cleanText)}`}>\n            {node.cleanText}\n          </a>\n        </li>\n      )}\n      {node.children && node.children.length > 0 && (\n        <ul>\n          {node.children.map((value: ContentNodeType) => (\n            <TableOfContentsTree key={value.cleanText} node={value} />\n          ))}\n        </ul>\n      )}\n    </React.Fragment>\n  )\n}\n\nconst TableOfContents = ({ content }: Props) => {\n  const [tableOfContentsRoot, setTableOfContentsRoot] = useState<\n    ContentNodeType | undefined\n  >()\n\n  useEffect(() => {\n    const tableOfContentsRoot = generateTableOfContent(content)\n    setTableOfContentsRoot(tableOfContentsRoot)\n  }, [content])\n\n  return (\n    <div>\n      <div>\n        {tableOfContentsRoot !== undefined && (\n          <TableOfContentsTree node={tableOfContentsRoot} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default TableOfContents\n"],"names":["HEADING_TAGS","ContentNode","tag","text","children","parent","toJson","slice","length","map","value","add","node","push","getParent","prev","indexOf","padding","count","segment","result","i","cleanup","htmlMarkup","trim","startsWith","a","split","join","generateTableOfContent","root","interimTag","interimText","includes","newNode","createIdForTableOfContentHeading","heading","encodeURIComponent","toLowerCase","replaceAll","TableOfContentsTree","console","log","cleanText","JSON","stringify","_","undefined","React","href","key","TableOfContents","content","useState","tableOfContentsRoot","setTableOfContentsRoot","useEffect"],"mappings":"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"}